{"version":3,"file":"users.js","names":["Router","require","users","entryModel","communityModel","getDateTime","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","h","getHours","m","getMinutes","time","overwrite","stu","dev","num","dat","tim","updateOne","code","$set","device","number","date","active","error","res","send","estado","msg","returnDevice","registerEntry","name","last","secondLast","sec","mail","typ","newEntry","firstName","lastName","secondLastName","grade","email","type","save","console","log","post","req","mensaje","body","txt","status","userInfo","student","entryDate","entryTime","exists","findOne","parseInt","searchInfo","doc","filt","document","filter","dateArr","split","fixedDate","data","find","get","activeOnes","exports"],"sources":["../../src/routes/users.js"],"sourcesContent":["const { Router } = require('express');\nconst users = Router();\nconst { entryModel } = require('../models/entryModel');\nconst { communityModel } = require('../models/communityModel');\n\n/**\n * X) Function date\n * Name : Get current date and time\n * METHOD : Local\n */\n\nfunction getDateTime() {\n  let today = new Date();\n  const dd = String(today.getDate()).padStart(2, '0');\n  const mm = String(today.getMonth() + 1).padStart(2, '0'); // January is 0!\n  const yyyy = today.getFullYear();\n  const h = String(today.getHours());\n  const m = String(today.getMinutes()).padStart(2, '0');\n\n  today = mm + '/' + dd + '/' + yyyy;\n  // Saca hora actual\n  const time = h + ':' + m;\n\n  return [today, time];\n}\n/**\n * X) Function Overwrite\n * Name : Overwrite rented device\n * METHOD : Database connected\n * Params: Receives student document, device type, device number and current date\n * Purpose: Update a user by assigning the device brought from Front end and changing the active state to true.\n */\n\nfunction overwrite(stu, dev, num, dat, tim) {\n  // Busca al estudiante que se va a actualizar por su documento (code : student)\n  communityModel.updateOne(\n    { code: stu },\n    // Hace los respectivos cambios en el registro encontrado\n    { $set: { device: dev, number: num, date: dat, time: tim, active: true } },\n    function (error) {\n      // Si hay un error envía mensaje que indica que no se pudo registrar el cambio.\n      if (error) {\n        res.send({\n          estado: 'error',\n          msg: 'No se pudo registrar el aquiler por problemas en la actualización del usuario.',\n        });\n      }\n    }\n  );\n}\n\n/**\n * X) Function returnDevice\n * Name : Return rented device\n * METHOD : Database connected\n * Params: Receives device type, device number and current date\n * Purpose: Update a user by assigning the device brought from Front end and changing the active state to true.\n */\n\nfunction returnDevice(dev, num, dat, tim) {\n  // Busca al usuario que se va a actualizar según el dispositivo y número (device: dev, number: num)\n  communityModel.updateOne(\n    { device: dev, number: num },\n    // Hace los respectivos cambios en el registro encontrado\n    {\n      $set: { device: 'none', number: 0, date: dat, time: tim, active: false },\n    },\n    function (error) {\n      // Si hay un error envía mensaje que indica que no se pudo registrar el cambio.\n      if (error) {\n        res.send({\n          estado: 'error',\n          msg: 'No se pudo registrar la devolución del equipo por problemas en la actualización del usuario.',\n        });\n      }\n    }\n  );\n}\n\n/**\n * X) Function registerEntry\n * Name : Register entry\n * METHOD : Database connected\n * Params: Receives all info for later checking\n * Purpose: Registers a new entry everytime something is done in the application. Creates a history of processes.\n */\n\nfunction registerEntry(\n  stu,\n  name,\n  last,\n  secondLast,\n  sec,\n  mail,\n  dev,\n  num,\n  dat,\n  tim,\n  typ\n) {\n  const newEntry = new entryModel({\n    code: stu,\n    firstName: name,\n    lastName: last,\n    secondLastName: secondLast,\n    grade: sec,\n    email: mail,\n    device: dev,\n    number: num,\n    date: dat,\n    time: tim,\n    type: typ,\n  });\n  newEntry.save(function (error) {\n    if (error) {\n      console.log(error);\n      console.log('No se pudo crear un nuevo registro de movimiento.');\n    }\n    console.log('Registro exitoso.');\n  });\n}\n\n/**\n * X)\n * Name : Probar conexión\n * Method : POST\n * Route : /prueba\n */\nusers.post('/prueba', async function (req, res) {\n  // Se recibe la información del frontend\n  const { mensaje } = req.body;\n  mensaje.txt === 'Mensaje de prueba'\n    ? res.send({\n        status: 'ok',\n        msg: 'La aplicación se encuentra conectada al servidor.',\n      })\n    : res.send({\n        status: 'Error',\n        msg: 'La aplicación no pudo establecer una conexión estable al servidor. Por favor contacte a soporte.',\n      });\n});\n\n/**\n * 1)\n * Name : Subscribe new users\n * Method : POST\n * Route : /rent\n */\nusers.post('/rent', async function (req, res) {\n  // Se recibe la información del frontend\n  const { userInfo } = req.body;\n\n  // El objeto se desestructura en diferentes variables\n  const [student, device, number, entryDate, entryTime] = [\n    userInfo.code,\n    userInfo.device,\n    userInfo.number,\n    getDateTime()[0],\n    getDateTime()[1],\n  ];\n  // Se hace validación en consola para revisar si los datos llegaron correctamente.\n  console.log('Member code: ' + student);\n  console.log('Device: ' + device);\n  console.log('Number: ' + number);\n  console.log('Entry Date: ' + entryDate);\n  console.log('Entry Time: ' + entryTime);\n\n  // Se busca primero si el usuario existe en base de datos por medio del número de documento.\n  const exists = await communityModel.findOne({ code: parseInt(student) });\n  // Si el estudiante no existe, envía un mensaje indicando que el usuario no se encuentra registrado en la base de datos.\n  if (!exists) {\n    res.send({\n      status: 'error',\n      msg: `El usuario ${userInfo.code} no se encuentra registrado en nuestra base de datos.`,\n    });\n    // Si por lo contrario, el usuario sí existe, se revisa que no tenga un dispositivo alquilado ya.\n  } else {\n    // Si tiene un dispositivo alquilado, se envía el mensaje respectivo al frontend indicando cuál es el dispositivo que debe entregar.\n    if (exists.active) {\n      res.send({\n        status: 'Error',\n        msg: `El estudiante ${exists.firstName} ${exists.lastName} con documento ${exists.code} tiene actualmente el dispositivo ${exists.device} #${exists.number} alquilado. Fue alquilado el ${exists.date} a las ${exists.time} y no ha sido devuelto.`,\n      });\n    } else {\n      // De lo contrario ya pasó todas las validaciones y se procede a editar el registro y asignarle el dispositivo al estudiante por medio de la función de overwrite.\n      overwrite(\n        parseInt(student),\n        device,\n        parseInt(number),\n        entryDate,\n        entryTime\n      );\n      // Se realiza movimiento por ende se registra en base de datos.\n      registerEntry(\n        exists.code,\n        exists.firstName,\n        exists.lastName,\n        exists.secondLastName,\n        exists.grade,\n        exists.email,\n        device,\n        parseInt(number),\n        entryDate,\n        entryTime,\n        'ALQUILER'\n      );\n      res.send({ estado: 'ok', msg: 'Alquiler registrado con éxito.' });\n    }\n  }\n});\n\n/**\n * 2)\n * Name : Return devices\n * Method : POST\n * Route : /return\n */\nusers.post('/return', async function (req, res) {\n  // Se recibe la información del frontend\n  const { userInfo } = req.body;\n  // El objeto se desestructura en diferentes variables\n  const [type, num, entryDate, entryTime] = [\n    userInfo.device,\n    userInfo.number,\n    getDateTime()[0],\n    getDateTime()[1],\n  ];\n  // Se hace validación en consola para revisar si los datos llegaron correctamente.\n  console.log('Device: ' + type);\n  console.log('Number: ' + num);\n  console.log('Entry Date: ' + entryDate);\n  console.log('Entry Time: ' + entryTime);\n\n  // Se busca primero el registro que corresponda al tipo de dispositivo y número que se solicita desde frontend.\n  const exists = await communityModel.findOne({\n    device: type,\n    number: parseInt(num),\n  });\n  // Si el registro no existe, envía un mensaje indicando que no se encontró un registro de ese dispositivo en base de datos.\n  if (!exists) {\n    res.send({\n      status: 'error',\n      msg: `No se encontró en base de datos un registro que corresponda al ${type} #${num}`,\n    });\n    // Si por lo contrario, se encuentra un registro entonces se pasa a realizar el proceso de devolución.\n  } else {\n    returnDevice(type, parseInt(num), entryDate, entryTime);\n    //  Debido a que se realiza un movimiento, este se registra en base de datos.\n    registerEntry(\n      exists.code,\n      exists.firstName,\n      exists.lastName,\n      exists.secondLastName,\n      exists.grade,\n      exists.email,\n      type,\n      parseInt(num),\n      entryDate,\n      entryTime,\n      'DEVOLUCION'\n    );\n    res.send({\n      estado: 'ok',\n      msg: `El ${exists.device} #${exists.number} alquilado por ${exists.firstName} ${exists.lastName} fue devuelto exitosamente.`,\n    });\n  }\n});\n\n/**\n * 3)\n * Name : Search devices\n * Method : POST\n * Route : /search\n */\nusers.post('/search', async function (req, res) {\n  // Se recibe la información del frontend\n  const { userInfo } = req.body;\n  // El objeto se desestructura en diferentes variables\n  const [type, num] = [userInfo.device, userInfo.number];\n  // Se hace validación en consola para revisar si los datos llegaron correctamente.\n  console.log('Device: ' + type);\n  console.log('Number: ' + num);\n\n  // Se busca primero el registro que corresponda al tipo de dispositivo y número que se solicita desde frontend.\n  const exists = await communityModel.findOne({\n    device: type,\n    number: parseInt(num),\n  });\n  // Si el registro no existe, envía un mensaje indicando que no se encontró un registro de ese dispositivo en base de datos.\n  if (!exists) {\n    res.send({\n      status: 'error',\n      msg: `El ${type} #${num} no se encuentra alquilado en este momento.`,\n    });\n    // Si por lo contrario, se encuentra un registro entonces se indica quién lo tiene y desde cuándo.\n  } else {\n    res.send({\n      estado: 'ok',\n      msg: `El ${exists.device} #${exists.number} se encuentra alquilado por ${exists.firstName} ${exists.lastName} ${exists.secondLastName} de ${exists.grade} desde el ${exists.date} a las ${exists.time}.`,\n    });\n  }\n});\n\n/**\n * 4)\n * Name : Get User Entries\n * Method : POST\n * Route : /entries\n */\nusers.post('/entries', async function (req, res) {\n  // Se recibe la información del frontend\n  const { searchInfo } = req.body;\n  const [doc, dat, filt] = [\n    parseInt(searchInfo.document),\n    searchInfo.date,\n    searchInfo.filter,\n  ];\n  console.log(dat);\n  const dateArr = dat.split('-');\n  console.log(dateArr);\n  const fixedDate = dateArr[1] + '/' + dateArr[2] + '/' + dateArr[0];\n  console.log(fixedDate);\n\n  let data = {};\n\n  filt === 'Documento'\n    ? (data = await entryModel.find({ code: doc }))\n    : (data = await entryModel.find({ date: fixedDate }));\n\n  res.send({ status: 'ok', msg: 'Info found', data });\n});\n\n/**\n * 5)\n * Name : Get Device Entries\n * Method : GET\n * Route : /devices\n */\nusers.get('/devices', function (req, res) {\n  // Se inicializa el objeto que se va a enviar\n  let data = {};\n\n  // Se buscan todos los registros que tengan un dispositivo rentado.\n  communityModel.find({ active: true }, function (error, activeOnes) {\n    if (error) {\n      res.send({\n        status: 'Error',\n        msg: 'No se pudo establecer uan conexión a base de datos.',\n      });\n    } else {\n      data = activeOnes;\n      res.send({ status: 'ok', msg: 'Info found', data });\n    }\n  });\n});\n\nexports.users = users;\n"],"mappings":"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"}