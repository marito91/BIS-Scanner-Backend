{"version":3,"file":"userModel.js","names":["model","Schema","require","userSchema","section","type","required","grade","lastName","name","document","email","blocked","hasDeviceRented","hasBookRented","deviceHistory","default","device","dateRented","Date","dateReturned","conditions","String","bookHistory","barcode","dueDate","versionKey","UserModel","exports"],"sources":["../../src/models/userModel.js"],"sourcesContent":["const { model, Schema } = require('mongoose');\n// const { genSalt, hash } = require('bcryptjs');\n\nconst userSchema = new Schema(\n  {\n    section: {\n      type: 'string',\n      required: true,\n    },\n    grade: {\n      type: 'string',\n      required: true,\n    },\n    lastName: {\n      type: 'string',\n      required: true,\n    },\n    name: {\n      type: 'string',\n      required: true,\n    },\n    document: {\n      type: 'number',\n      required: true,\n    },\n    email: {\n      type: 'string',\n      required: true,\n    },\n    blocked: {\n      type: 'boolean',\n      required: true,\n    },\n    hasDeviceRented: {\n      type: 'boolean',\n      required: true,\n    },\n    hasBookRented: {\n      type: 'boolean',\n      required: true,\n    },\n    deviceHistory: {\n      type: 'array',\n      default: [\n        {\n          device: {\n            type: 'string',\n          },\n          dateRented: {\n            type: Date,\n          },\n          dateReturned: {\n            type: Date,\n          },\n          conditions: {\n            type: String,\n          },\n        },\n      ],\n    },\n    bookHistory: {\n      type: 'array',\n      default: [\n        {\n          barcode: {\n            type: 'string',\n          },\n          dueDate: {\n            type: Date,\n          },\n          dateRented: {\n            type: Date,\n          },\n          dateReturned: {\n            type: Date,\n          },\n          conditions: {\n            type: String,\n          },\n        },\n      ],\n    },\n  },\n  {\n    versionKey: false,\n  }\n);\n\nconst UserModel = model('user', userSchema);\n\nexports.UserModel = UserModel;\n"],"mappings":";;AAAA,MAAM;EAAEA,KAAK;EAAEC;AAAO,CAAC,GAAGC,OAAO,CAAC,UAAU,CAAC;AAC7C;;AAEA,MAAMC,UAAU,GAAG,IAAIF,MAAM,CAC3B;EACEG,OAAO,EAAE;IACPC,IAAI,EAAE,QAAQ;IACdC,QAAQ,EAAE;EACZ,CAAC;EACDC,KAAK,EAAE;IACLF,IAAI,EAAE,QAAQ;IACdC,QAAQ,EAAE;EACZ,CAAC;EACDE,QAAQ,EAAE;IACRH,IAAI,EAAE,QAAQ;IACdC,QAAQ,EAAE;EACZ,CAAC;EACDG,IAAI,EAAE;IACJJ,IAAI,EAAE,QAAQ;IACdC,QAAQ,EAAE;EACZ,CAAC;EACDI,QAAQ,EAAE;IACRL,IAAI,EAAE,QAAQ;IACdC,QAAQ,EAAE;EACZ,CAAC;EACDK,KAAK,EAAE;IACLN,IAAI,EAAE,QAAQ;IACdC,QAAQ,EAAE;EACZ,CAAC;EACDM,OAAO,EAAE;IACPP,IAAI,EAAE,SAAS;IACfC,QAAQ,EAAE;EACZ,CAAC;EACDO,eAAe,EAAE;IACfR,IAAI,EAAE,SAAS;IACfC,QAAQ,EAAE;EACZ,CAAC;EACDQ,aAAa,EAAE;IACbT,IAAI,EAAE,SAAS;IACfC,QAAQ,EAAE;EACZ,CAAC;EACDS,aAAa,EAAE;IACbV,IAAI,EAAE,OAAO;IACbW,OAAO,EAAE,CACP;MACEC,MAAM,EAAE;QACNZ,IAAI,EAAE;MACR,CAAC;MACDa,UAAU,EAAE;QACVb,IAAI,EAAEc;MACR,CAAC;MACDC,YAAY,EAAE;QACZf,IAAI,EAAEc;MACR,CAAC;MACDE,UAAU,EAAE;QACVhB,IAAI,EAAEiB;MACR;IACF,CAAC;EAEL,CAAC;EACDC,WAAW,EAAE;IACXlB,IAAI,EAAE,OAAO;IACbW,OAAO,EAAE,CACP;MACEQ,OAAO,EAAE;QACPnB,IAAI,EAAE;MACR,CAAC;MACDoB,OAAO,EAAE;QACPpB,IAAI,EAAEc;MACR,CAAC;MACDD,UAAU,EAAE;QACVb,IAAI,EAAEc;MACR,CAAC;MACDC,YAAY,EAAE;QACZf,IAAI,EAAEc;MACR,CAAC;MACDE,UAAU,EAAE;QACVhB,IAAI,EAAEiB;MACR;IACF,CAAC;EAEL;AACF,CAAC,EACD;EACEI,UAAU,EAAE;AACd,CAAC,CACF;AAED,MAAMC,SAAS,GAAG3B,KAAK,CAAC,MAAM,EAAEG,UAAU,CAAC;AAE3CyB,OAAO,CAACD,SAAS,GAAGA,SAAS"}